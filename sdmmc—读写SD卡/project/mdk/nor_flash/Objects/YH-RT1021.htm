<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\nor_flash\Objects\YH-RT1021.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\nor_flash\Objects\YH-RT1021.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 01 15:39:32 2018
<BR><P>
<H3>Maximum Stack Usage =       6024 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SDCardTest &rArr; AccessCard &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[107]">LOG_Push</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8]">__aeabi_assert</a><BR>
 <LI><a href="#[110]">LPUART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8]">__aeabi_assert</a><BR>
 <LI><a href="#[111]">LPUART_ReadBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">ACMP1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[86]">ACMP2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[87]">ACMP3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[88]">ACMP4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4d]">ADC1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4e]">ADC2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[83]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[80]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[81]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[82]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[41]">BEE_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bd]">CAN1_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2e]">CAN1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[be]">CAN2_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2f]">CAN2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[69]">CCM_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6a]">CCM_2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[1d]">CORE_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3b]">CSU_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[1b]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[1c]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4f]">DCDC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3c]">DCP_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3d]">DCP_VMI_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9c]">DMA0_DMA16_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[a]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a6]">DMA10_DMA26_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[14]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a7]">DMA11_DMA27_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[15]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a8]">DMA12_DMA28_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[16]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a9]">DMA13_DMA29_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[17]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[aa]">DMA14_DMA30_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[18]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ab]">DMA15_DMA31_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[19]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9d]">DMA1_DMA17_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[b]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9e]">DMA2_DMA18_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[c]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9f]">DMA3_DMA19_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[d]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a0]">DMA4_DMA20_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[e]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a1]">DMA5_DMA21_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[f]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a2]">DMA6_DMA22_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[10]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a3]">DMA7_DMA23_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[11]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a4]">DMA8_DMA24_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[12]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[a5]">DMA9_DMA25_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[13]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ac]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1a]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ca]">DbgConsole_RelocateLog</a> from fsl_debug_console.o(i.DbgConsole_RelocateLog) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[98]">DefaultISR</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[98]">DefaultISR</a> from startup_mimxrt1021.o(.text) referenced 97 times from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8b]">ENC1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8c]">ENC2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c9]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[7d]">ENET_1588_Timer_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c8]">ENET_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[7c]">ENET_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[68]">EWM_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c4]">FLEXIO1_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[64]">FLEXIO1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[30]">FLEXRAM_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c5]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[76]">FLEXSPI_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6b]">GPC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5a]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5b]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[52]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[53]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[54]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[55]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[56]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[57]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[58]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[59]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5c]">GPIO2_Combined_0_15_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5d]">GPIO2_Combined_16_31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5e]">GPIO3_Combined_0_15_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5f]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[62]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[63]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[33]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6e]">GPT1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6f]">GPT2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[31]">KPP_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b5]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[26]">LPI2C1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b6]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[27]">LPI2C2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b7]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[28]">LPI2C3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b8]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[29]">LPI2C4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b9]">LPSPI1_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2a]">LPSPI1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ba]">LPSPI2_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2b]">LPSPI2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bb]">LPSPI3_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2c]">LPSPI3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bc]">LPSPI4_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[2d]">LPSPI4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ad]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1e]">LPUART1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[ae]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[1f]">LPUART2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[af]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[20]">LPUART3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b0]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[21]">LPUART4_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b1]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[22]">LPUART5_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b2]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[23]">LPUART6_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b3]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[24]">LPUART7_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[b4]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(i.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[25]">LPUART8_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[84]">PIT_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[47]">PMU_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[70]">PWM1_0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[71]">PWM1_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[72]">PWM1_2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[73]">PWM1_3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[74]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[93]">PWM2_0_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[94]">PWM2_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[95]">PWM2_2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[96]">PWM2_3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[97]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[67]">RTWDOG_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[60]">Reserved102_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[61]">Reserved103_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[65]">Reserved107_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6d]">Reserved115_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[75]">Reserved123_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7a]">Reserved128_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[89]">Reserved143_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8a]">Reserved144_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8d]">Reserved147_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8e]">Reserved148_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[91]">Reserved151_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[92]">Reserved152_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[32]">Reserved56_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[34]">Reserved58_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[35]">Reserved59_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[36]">Reserved60_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3e]">Reserved68_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[40]">Reserved70_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[48]">Reserved78_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4c]">Reserved82_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[51]">Reserved87_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[bf]">SAI1_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[42]">SAI1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c0]">SAI2_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[43]">SAI2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c1]">SAI3_RX_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[44]">SAI3_RX_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c2]">SAI3_TX_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[45]">SAI3_TX_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[cb]">SDMMCHOST_TransferFunction</a> from fsl_sdmmc_host.o(i.SDMMCHOST_TransferFunction) referenced from fsl_sdmmc_host.o(i.SDMMCHOST_Init)
 <LI><a href="#[77]">SEMC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[38]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[39]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3a]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c3]">SPDIF_DriverIRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[46]">SPDIF_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6c]">SRC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from fsl_sdmmc_event.o(i.SysTick_Handler) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9a]">SystemInit</a> from system_mimxrt1021.o(i.SystemInit) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[49]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4a]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[8f]">TMR1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[90]">TMR2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[3f]">TRNG_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7b]">USB_OTG1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[4b]">USB_PHY_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c6]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[78]">USDHC1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[c7]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(i.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[79]">USDHC2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[66]">WDOG1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[37]">WDOG2_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7e]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[7f]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1021.o(.text) referenced from startup_mimxrt1021.o(RESET)
 <LI><a href="#[9b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1021.o(.text)
 <LI><a href="#[99]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[cc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[17e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[155]"></a>__asm___8_fsl_sd_c_d776f2ac____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sd.o(.rev16_text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mimxrt1021.o(.text)
<LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Reserved102_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Reserved103_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Reserved107_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>Reserved123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>Reserved128_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>Reserved147_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>Reserved148_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>Reserved151_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Reserved152_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>Reserved56_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Reserved58_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Reserved60_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USB_PHY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1021.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>

<P><STRONG><a name="[17f]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchVoltage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[157]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[df]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[187]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[188]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[177]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[18a]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitEnetPll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, board.o(i.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_ConfigMPU &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, board.o(i.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BOARD_DebugConsoleSrcFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[ed]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; LOG_Init &rArr; IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>BOARD_InitPins</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = BOARD_InitPins &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>CLOCK_GetFreq</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_InitTimer
</UL>

<P><STRONG><a name="[eb]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, fsl_clock.o(i.CLOCK_GetPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[fe]"></a>CLOCK_GetSysPfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetSysPfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_GetSysPfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[fd]"></a>CLOCK_GetUsb1PfdFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_GetUsb1PfdFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[e3]"></a>CLOCK_InitEnetPll</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_InitEnetPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_InitEnetPll
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f4]"></a>CLOCK_InitSysPfd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_InitSysPfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitSysPfd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_USDHCClockConfiguration
</UL>

<P><STRONG><a name="[ee]"></a>DbgConsole_Init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = DbgConsole_Init &rArr; LOG_Init &rArr; IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[db]"></a>DbgConsole_Printf</STRONG> (Thumb, 60 bytes, Stack size 160 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardInformationLog
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardTest
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>GPIO_PinInit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSetInterruptConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Mode_Config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>

<P><STRONG><a name="[10b]"></a>GPIO_PinSetInterruptConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, fsl_gpio.o(i.GPIO_PinSetInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinSetInterruptConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[10a]"></a>GPIO_PinWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPIO_PinWrite &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[10c]"></a>IO_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, fsl_io.o(i.IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Init
</UL>

<P><STRONG><a name="[10f]"></a>IO_Transfer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fsl_io.o(i.IO_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IO_Transfer &rArr; LPUART_ReadBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Pop
</UL>

<P><STRONG><a name="[112]"></a>LED_GPIO_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = LED_GPIO_Config &rArr; LED_GPIO_Mode_Config &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_PAD_Config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_MUX_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>LOG_Init</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fsl_log.o(i.LOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = LOG_Init &rArr; IO_Init &rArr; LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[118]"></a>LOG_Pop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_log.o(i.LOG_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LOG_Pop &rArr; IO_Transfer &rArr; LPUART_ReadBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
</UL>

<P><STRONG><a name="[107]"></a>LOG_Push</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_log.o(i.LOG_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = LOG_Push &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_RelocateLog
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[b5]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_lpi2c.o(i.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_CommonIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART4_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART5_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART6_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART7_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART8_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>LPUART_ClearStatusFlags</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
</UL>

<P><STRONG><a name="[10d]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_lpuart.o(i.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[11c]"></a>LPUART_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LPUART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[11b]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_lpuart.o(i.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
</UL>

<P><STRONG><a name="[10e]"></a>LPUART_Init</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, fsl_lpuart.o(i.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LPUART_Init &rArr; CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[111]"></a>LPUART_ReadBlocking</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, fsl_lpuart.o(i.LPUART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = LPUART_ReadBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlags
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Transfer
</UL>

<P><STRONG><a name="[110]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_lpuart.o(i.LPUART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = LPUART_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Transfer
</UL>

<P><STRONG><a name="[11d]"></a>SDCardTest</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_sd.o(i.SDCardTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = SDCardTest &rArr; AccessCard &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardInformationLog
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>SDCard_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_sd.o(i.SDCard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SDCard_Init &rArr; SD_CardInit &rArr; SD_SendScr &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_USDHCClockConfiguration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardTest
</UL>

<P><STRONG><a name="[126]"></a>SDMMCEVENT_Delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
</UL>

<P><STRONG><a name="[121]"></a>SDMMCEVENT_InitTimer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_sdmmc_event.o(i.SDMMCEVENT_InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDMMCEVENT_InitTimer &rArr; CLOCK_GetFreq &rArr; CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[125]"></a>SDMMCHOST_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMCHOST_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchVoltage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
</UL>

<P><STRONG><a name="[127]"></a>SDMMCHOST_ErrorRecovery</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_ErrorRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMCHOST_ErrorRecovery &rArr; USDHC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[129]"></a>SDMMCHOST_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SDMMCHOST_Init &rArr; SDMMCHOST_CardDetectInit &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
</UL>

<P><STRONG><a name="[12c]"></a>SDMMC_ExecuteTuning</STRONG> (Thumb, 232 bytes, Stack size 216 bytes, fsl_sdmmc_common.o(i.SDMMC_ExecuteTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SDMMC_ExecuteTuning &rArr; USDHC_EnableStandardTuning
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableStandardTuning
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_AdjustDelayForManualTuning
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExecuteTuning
</UL>

<P><STRONG><a name="[12f]"></a>SDMMC_GoIdle</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, fsl_sdmmc_common.o(i.SDMMC_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = SDMMC_GoIdle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
</UL>

<P><STRONG><a name="[130]"></a>SDMMC_SelectCard</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, fsl_sdmmc_common.o(i.SDMMC_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
</UL>

<P><STRONG><a name="[131]"></a>SDMMC_SendApplicationCommand</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, fsl_sdmmc_common.o(i.SDMMC_SendApplicationCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>

<P><STRONG><a name="[132]"></a>SDMMC_SetBlockSize</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, fsl_sdmmc_common.o(i.SDMMC_SetBlockSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SDMMC_SetBlockSize &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[133]"></a>SDMMC_SwitchVoltage</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, fsl_sdmmc_common.o(i.SDMMC_SwitchVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = SDMMC_SwitchVoltage &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ForceClockOn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
</UL>

<P><STRONG><a name="[120]"></a>SD_CardInit</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, fsl_sd.o(i.SD_CardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = SD_CardInit &rArr; SD_SendScr &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetSdClock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetCardActive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetCapability
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetDataBusWidth
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetMaxCurrent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDriverStrength
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[e0]"></a>SD_EraseBlocks</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, fsl_sd.o(i.SD_EraseBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SD_EraseBlocks &rArr; SD_Erase &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
</UL>

<P><STRONG><a name="[11f]"></a>SD_HostInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = SD_HostInit &rArr; SDMMCHOST_Init &rArr; SDMMCHOST_CardDetectInit &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[de]"></a>SD_ReadBlocks</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = SD_ReadBlocks &rArr; SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
</UL>

<P><STRONG><a name="[dc]"></a>SD_WriteBlocks</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, fsl_sd.o(i.SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = SD_WriteBlocks &rArr; SD_Write &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessCard
</UL>

<P><STRONG><a name="[106]"></a>StrFormatPrintf</STRONG> (Thumb, 1576 bytes, Stack size 160 bytes, fsl_str.o(i.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, system_mimxrt1021.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[9a]"></a>SystemInit</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, system_mimxrt1021.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1021.o(i.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1021.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>USDHC_AdjustDelayForManualTuning</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_AdjustDelayForManualTuning))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
</UL>

<P><STRONG><a name="[152]"></a>USDHC_EnableDDRMode</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, fsl_usdhc.o(i.USDHC_EnableDDRMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USDHC_EnableDDRMode
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[12d]"></a>USDHC_EnableStandardTuning</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_usdhc.o(i.USDHC_EnableStandardTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC_EnableStandardTuning
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
</UL>

<P><STRONG><a name="[13c]"></a>USDHC_GetCapability</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_GetCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = USDHC_GetCapability &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[12a]"></a>USDHC_Init</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fsl_usdhc.o(i.USDHC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = USDHC_Init &rArr; USDHC_SetTransferInterrupt &rArr; USDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetTransferInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInstance
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[128]"></a>USDHC_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_usdhc.o(i.USDHC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USDHC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
</UL>

<P><STRONG><a name="[161]"></a>USDHC_SendCommand</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = USDHC_SendCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[162]"></a>USDHC_SetADMA1Descriptor</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, fsl_usdhc.o(i.USDHC_SetADMA1Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = USDHC_SetADMA1Descriptor &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[163]"></a>USDHC_SetADMA2Descriptor</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, fsl_usdhc.o(i.USDHC_SetADMA2Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[164]"></a>USDHC_SetAdmaTableConfig</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, fsl_usdhc.o(i.USDHC_SetAdmaTableConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = USDHC_SetAdmaTableConfig &rArr; USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetInternalDmaConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA2Descriptor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA1Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[13b]"></a>USDHC_SetCardActive</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_SetCardActive))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[165]"></a>USDHC_SetInternalDmaConfig</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_SetInternalDmaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = USDHC_SetInternalDmaConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
</UL>

<P><STRONG><a name="[13a]"></a>USDHC_SetSdClock</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, fsl_usdhc.o(i.USDHC_SetSdClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = USDHC_SetSdClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[12b]"></a>USDHC_TransferBlocking</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, fsl_usdhc.o(i.USDHC_TransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = USDHC_TransferBlocking &rArr; USDHC_SetAdmaTableConfig &rArr; USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SendCommand
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetDataTransferConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableInternalDMA
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_TransferFunction
</UL>

<P><STRONG><a name="[178]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ReadBlocking
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetInstance
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetInstance
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HostInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlocks
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardInformationLog
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetSdClock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetInternalDmaConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetAdmaTableConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA2Descriptor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetADMA1Descriptor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SendCommand
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetCapability
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInstance
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ControlGate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchVoltage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SetBlockSize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchVoltage
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetMaxCurrent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDriverStrength
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendRca
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendInterfaceCondition
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectCard
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GoIdle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExecuteTuning
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeScr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCsd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCid
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_DetectCardByGpio
</UL>

<P><STRONG><a name="[102]"></a>__hardfp_modf</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[103]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[176]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[170]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16e]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[174]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[171]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[175]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[18c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[173]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[99]"></a>main</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = main &rArr; SDCardTest &rArr; AccessCard &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardTest
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[172]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[159]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, system_mimxrt1021.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[158]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, system_mimxrt1021.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ff]"></a>CLOCK_GetOscFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>

<P><STRONG><a name="[fc]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetPeriphClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLOCK_GetPeriphClkFreq &rArr; CLOCK_GetUsb1PfdFreq &rArr; CLOCK_GetPllFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1PfdFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSysPfdFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[fa]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, fsl_gpio.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[108]"></a>GPIO_GetInstance</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPIO_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>

<P><STRONG><a name="[f7]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_lpuart.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
</UL>

<P><STRONG><a name="[119]"></a>LPI2C_CommonIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_lpi2c.o(i.LPI2C_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_CommonIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>CLOCK_ControlGate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fsl_usdhc.o(i.CLOCK_ControlGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CLOCK_ControlGate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
</UL>

<P><STRONG><a name="[15f]"></a>USDHC_ClearInterruptStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_ClearInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[166]"></a>USDHC_DisableInterruptSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_DisableInterruptSignal))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetTransferInterrupt
</UL>

<P><STRONG><a name="[167]"></a>USDHC_EnableInternalDMA</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_EnableInternalDMA))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[15b]"></a>USDHC_GetInstance</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_usdhc.o(i.USDHC_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = USDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetTransferInterrupt
</UL>

<P><STRONG><a name="[15e]"></a>USDHC_GetInterruptStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_usdhc.o(i.USDHC_GetInterruptStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[15d]"></a>USDHC_ReadByDataPortBlocking</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fsl_usdhc.o(i.USDHC_ReadByDataPortBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USDHC_ReadByDataPortBlocking &rArr; USDHC_ReadDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadDataPort
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
</UL>

<P><STRONG><a name="[160]"></a>USDHC_ReadDataPort</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, fsl_usdhc.o(i.USDHC_ReadDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USDHC_ReadDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
</UL>

<P><STRONG><a name="[16c]"></a>USDHC_ReceiveCommandResponse</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, fsl_usdhc.o(i.USDHC_ReceiveCommandResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USDHC_ReceiveCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WaitCommandDone
</UL>

<P><STRONG><a name="[168]"></a>USDHC_SetDataTransferConfig</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, fsl_usdhc.o(i.USDHC_SetDataTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USDHC_SetDataTransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[15c]"></a>USDHC_SetTransferInterrupt</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_SetTransferInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = USDHC_SetTransferInterrupt &rArr; USDHC_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInstance
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_DisableInterruptSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Init
</UL>

<P><STRONG><a name="[16a]"></a>USDHC_TransferDataBlocking</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_TransferDataBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USDHC_TransferDataBlocking &rArr; USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReadByDataPortBlocking
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[169]"></a>USDHC_WaitCommandDone</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fsl_usdhc.o(i.USDHC_WaitCommandDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = USDHC_WaitCommandDone &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ReceiveCommandResponse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
</UL>

<P><STRONG><a name="[16b]"></a>USDHC_WriteByDataPortBlocking</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, fsl_usdhc.o(i.USDHC_WriteByDataPortBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USDHC_WriteByDataPortBlocking &rArr; USDHC_WriteDataPort
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteDataPort
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_GetInterruptStatusFlags
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_ClearInterruptStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferDataBlocking
</UL>

<P><STRONG><a name="[16d]"></a>USDHC_WriteDataPort</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, fsl_usdhc.o(i.USDHC_WriteDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USDHC_WriteDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_WriteByDataPortBlocking
</UL>

<P><STRONG><a name="[ca]"></a>DbgConsole_RelocateLog</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_debug_console.o(i.DbgConsole_RelocateLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DbgConsole_RelocateLog &rArr; LOG_Push &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOG_Push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[101]"></a>ConvertFloatRadixNumToString</STRONG> (Thumb, 430 bytes, Stack size 120 bytes, fsl_str.o(i.ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[104]"></a>ConvertRadixNumToString</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, fsl_str.o(i.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ConvertRadixNumToString &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[ec]"></a>CLOCK_GetDiv</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, board.o(i.CLOCK_GetDiv))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[e7]"></a>SCB_DisableDCache</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, board.o(i.SCB_DisableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_DisableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[e8]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, board.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[e9]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, board.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
</UL>

<P><STRONG><a name="[e4]"></a>CLOCK_SetDiv</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[e2]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, clock_config.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f0]"></a>CLOCK_EnableClock</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, pin_mux.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[f2]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, pin_mux.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[f1]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, pin_mux.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[117]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, bsp_led.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_PAD_Config
</UL>

<P><STRONG><a name="[116]"></a>IOMUXC_SetPinMux</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, bsp_led.o(i.IOMUXC_SetPinMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOMUXC_MUX_Config
</UL>

<P><STRONG><a name="[115]"></a>LED_GPIO_Mode_Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_led.o(i.LED_GPIO_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = LED_GPIO_Mode_Config &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[113]"></a>LED_IOMUXC_MUX_Config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_led.o(i.LED_IOMUXC_MUX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_IOMUXC_MUX_Config &rArr; IOMUXC_SetPinMux
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinMux
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[114]"></a>LED_IOMUXC_PAD_Config</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_led.o(i.LED_IOMUXC_PAD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_IOMUXC_PAD_Config &rArr; IOMUXC_SetPinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
</UL>

<P><STRONG><a name="[da]"></a>AccessCard</STRONG> (Thumb, 266 bytes, Stack size 5128 bytes, bsp_sd.o(i.AccessCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 6016<LI>Call Chain = AccessCard &rArr; SD_WriteBlocks &rArr; SD_Write &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlocks
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardTest
</UL>

<P><STRONG><a name="[f3]"></a>BOARD_USDHCClockConfiguration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_sd.o(i.BOARD_USDHCClockConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BOARD_USDHCClockConfiguration &rArr; CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitSysPfd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetMux
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_Init
</UL>

<P><STRONG><a name="[f5]"></a>CLOCK_SetDiv</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_sd.o(i.CLOCK_SetDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetDiv &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_USDHCClockConfiguration
</UL>

<P><STRONG><a name="[f6]"></a>CLOCK_SetMux</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_sd.o(i.CLOCK_SetMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = CLOCK_SetMux &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_USDHCClockConfiguration
</UL>

<P><STRONG><a name="[100]"></a>CardInformationLog</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, bsp_sd.o(i.CardInformationLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = CardInformationLog &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCardTest
</UL>

<P><STRONG><a name="[122]"></a>SDMMCHOST_CardDetectInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_CardDetectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = SDMMCHOST_CardDetectInit &rArr; GPIO_PinInit &rArr; CLOCK_EnableClock &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableInterruptStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_DetectCardByGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_Init
</UL>

<P><STRONG><a name="[123]"></a>SDMMCHOST_DetectCardByGpio</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_DetectCardByGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SDMMCHOST_DetectCardByGpio &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>

<P><STRONG><a name="[cb]"></a>SDMMCHOST_TransferFunction</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fsl_sdmmc_host.o(i.SDMMCHOST_TransferFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SDMMCHOST_TransferFunction &rArr; USDHC_TransferBlocking &rArr; USDHC_SetAdmaTableConfig &rArr; USDHC_SetADMA2Descriptor &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_TransferBlocking
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_ErrorRecovery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_sdmmc_host.o(i.SDMMCHOST_Init)
</UL>
<P><STRONG><a name="[124]"></a>USDHC_EnableInterruptStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_sdmmc_host.o(i.USDHC_EnableInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCHOST_CardDetectInit
</UL>

<P><STRONG><a name="[153]"></a>IOMUXC_SetPinConfig</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, fsl_sd.o(i.IOMUXC_SetPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[135]"></a>SD_AllSendCid</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_AllSendCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = SD_AllSendCid &rArr; SD_DecodeCid &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCid
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[137]"></a>SD_ApplicationSendOperationCondition</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, fsl_sd.o(i.SD_ApplicationSendOperationCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = SD_ApplicationSendOperationCondition &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[136]"></a>SD_DecodeCid</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeCid))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SD_DecodeCid &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AllSendCid
</UL>

<P><STRONG><a name="[148]"></a>SD_DecodeCsd</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SD_DecodeCsd &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCsd
</UL>

<P><STRONG><a name="[149]"></a>SD_DecodeScr</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_DecodeScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = SD_DecodeScr &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
</UL>

<P><STRONG><a name="[14a]"></a>SD_Erase</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, fsl_sd.o(i.SD_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = SD_Erase &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlocks
</UL>

<P><STRONG><a name="[14d]"></a>SD_ExecuteTuning</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_ExecuteTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ExecuteTuning
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[13d]"></a>SD_GoIdle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_GoIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SD_GoIdle &rArr; SDMMC_GoIdle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GoIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[14e]"></a>SD_Read</STRONG> (Thumb, 288 bytes, Stack size 96 bytes, fsl_sd.o(i.SD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = SD_Read &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[147]"></a>SD_SelectBusTiming</STRONG> (Thumb, 756 bytes, Stack size 24 bytes, fsl_sd.o(i.SD_SelectBusTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = SD_SelectBusTiming &rArr; SD_SelectFunction &rArr; SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_SetSdClock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_EnableDDRMode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExecuteTuning
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOMUXC_SetPinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[142]"></a>SD_SelectCard</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = SD_SelectCard &rArr; SDMMC_SelectCard &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SelectCard
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[151]"></a>SD_SelectFunction</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, fsl_sd.o(i.SD_SelectFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = SD_SelectFunction &rArr; SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_fsl_sd_c_d776f2ac____REV16
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SwitchFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetMaxCurrent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDriverStrength
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectBusTiming
</UL>

<P><STRONG><a name="[138]"></a>SD_SendApplicationCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_sd.o(i.SD_SendApplicationCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendApplicationCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDataBusWidth
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendScr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ApplicationSendOperationCondition
</UL>

<P><STRONG><a name="[141]"></a>SD_SendCsd</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_SendCsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = SD_SendCsd &rArr; SD_DecodeCsd &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeCsd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[13e]"></a>SD_SendInterfaceCondition</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, fsl_sd.o(i.SD_SendInterfaceCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SD_SendInterfaceCondition &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[140]"></a>SD_SendRca</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_SendRca))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = SD_SendRca &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[143]"></a>SD_SendScr</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, fsl_sd.o(i.SD_SendScr))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = SD_SendScr &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_fsl_sd_c_d776f2ac____REV16
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DecodeScr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[144]"></a>SD_SetDataBusWidth</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_SetDataBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = SD_SetDataBusWidth &rArr; SD_SendApplicationCmd &rArr; SDMMC_SendApplicationCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendApplicationCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[145]"></a>SD_SetDriverStrength</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fsl_sd.o(i.SD_SetDriverStrength))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = SD_SetDriverStrength &rArr; SD_SelectFunction &rArr; SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[146]"></a>SD_SetMaxCurrent</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fsl_sd.o(i.SD_SetMaxCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = SD_SetMaxCurrent &rArr; SD_SelectFunction &rArr; SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[14f]"></a>SD_StopTransmission</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = SD_StopTransmission &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[154]"></a>SD_SwitchFunction</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, fsl_sd.o(i.SD_SwitchFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = SD_SwitchFunction &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectFunction
</UL>

<P><STRONG><a name="[13f]"></a>SD_SwitchVoltage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_sd.o(i.SD_SwitchVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = SD_SwitchVoltage &rArr; SDMMC_SwitchVoltage &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[14c]"></a>SD_Transfer</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fsl_sd.o(i.SD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USDHC_Reset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExecuteTuning
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[14b]"></a>SD_WaitWriteComplete</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, fsl_sd.o(i.SD_WaitWriteComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[156]"></a>SD_Write</STRONG> (Thumb, 304 bytes, Stack size 96 bytes, fsl_sd.o(i.SD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = SD_Write &rArr; SD_WaitWriteComplete &rArr; SD_Transfer &rArr; SD_ExecuteTuning &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteComplete
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Transfer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
</UL>

<P><STRONG><a name="[139]"></a>USDHC_SetDataBusWidth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_sd.o(i.USDHC_SetDataBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CardInit
</UL>

<P><STRONG><a name="[134]"></a>USDHC_ForceClockOn</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_sdmmc_common.o(i.USDHC_ForceClockOn))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SwitchVoltage
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
